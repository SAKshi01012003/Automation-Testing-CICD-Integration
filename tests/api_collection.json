{
	"info": {
		"_postman_id": "fd75b3cc-a13c-4a1f-97af-2831ccaf0d2e",
		"name": "Automation Testing Tool CICD Integration testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27495142"
	},
	"item": [
		{
			"name": "New Request",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// --- Get all global variables from Newman ---\r",
							"const apiUrl = pm.globals.get('api_url');\r",
							"const httpMethod = pm.globals.get('http_method');\r",
							"const authType = pm.globals.get('auth_type');\r",
							"const authUsername = pm.globals.get('auth_username');\r",
							"const authPassword = pm.globals.get('auth_password');\r",
							"const oauth2Token = pm.globals.get('oauth2_token');\r",
							"const inputSchemaFile = pm.globals.get('input_schema_file');\r",
							"const responseSchemaFile = pm.globals.get('response_schema_file');\r",
							"\r",
							"// --- Handle Dynamic URL and HTTP Method ---\r",
							"pm.request.url = apiUrl;\r",
							"pm.request.method = httpMethod;\r",
							"\r",
							"// --- Handle Dynamic Payload ---\r",
							"const body = pm.iterationData.toObject();\r",
							"pm.collectionVariables.set(\"requestBody\", JSON.stringify(body));\r",
							"\r",
							"// --- Handle Dynamic Authentication ---\r",
							"// Clear any existing authorization headers\r",
							"pm.request.headers.remove('Authorization');\r",
							"\r",
							"// Helper function to clean up quotes from the string\r",
							"function cleanString(str) {\r",
							"    if (typeof str !== 'string') {\r",
							"        return str;\r",
							"    }\r",
							"    return str.replace(/^\"|\"$/g, '').trim();\r",
							"}\r",
							"\r",
							"const cleanedAuthType = cleanString(authType);\r",
							"const cleanedUsername = cleanString(authUsername);\r",
							"const cleanedPassword = cleanString(authPassword);\r",
							"const cleanedOAuthToken = cleanString(oauth2Token);\r",
							"\r",
							"console.log('Authentication Type:', cleanedAuthType);\r",
							"\r",
							"if (cleanedAuthType === 'Basic' || cleanedAuthType === 'Basic Auth' && cleanedUsername && cleanedPassword) {\r",
							"    const credentials = btoa(`${cleanedUsername}:${cleanedPassword}`);\r",
							"    pm.request.headers.add({\r",
							"        key: 'Authorization',\r",
							"        value: `Basic ${credentials}`\r",
							"    });\r",
							"    console.log('Authentication type: Basic Auth');\r",
							"\r",
							"} else if (cleanedAuthType === 'OAuth2' && cleanedOAuthToken) {\r",
							"    pm.request.headers.add({\r",
							"        key: 'Authorization',\r",
							"        value: `Bearer ${cleanedOAuthToken}`\r",
							"    });\r",
							"    console.log('Authentication type: OAuth2');\r",
							"    \r",
							"} else {\r",
							"    console.log('No authentication configuration provided.');\r",
							"}\r",
							"\r",
							"\r",
							"// --- Optional: Input Schema Validation ---\r",
							"// This test runs *before* the request is sent.\r",
							"if (inputSchemaFile) {\r",
							"    // Read the schema content from the global variable.\r",
							"    const schemaContent = pm.globals.get('input_schema_file');\r",
							"\r",
							"    pm.test('Input Payload Matches Schema', () => {\r",
							"        try {\r",
							"            const schema = JSON.parse(schemaContent);\r",
							"            const payload = pm.iterationData.toObject();\r",
							"            \r",
							"            // Validate using Postman's built-in tv4 library\r",
							"            const validationResult = tv4.validateResult(payload, schema);\r",
							"            \r",
							"            // Assert that the validation passed.\r",
							"            pm.expect(validationResult.valid).to.be.true;\r",
							"            console.log('Input schema validation successful.');\r",
							"\r",
							"        } catch (e) {\r",
							"            console.error('Input schema validation failed:', e);\r",
							"            throw new Error(`Input schema validation failed: ${e.message}`);\r",
							"        }\r",
							"    });\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// --- Response Schema Validation ---\r",
							"pm.test('Response Validates Against Schema', () => {\r",
							"    // Get schema file path from Newman global variables\r",
							"    const responseSchemaFile = pm.globals.get('response_schema_file');\r",
							"\r",
							"    // This is a test, so it should fail if the response is not valid JSON\r",
							"    try {\r",
							"        const jsonData = pm.response.json();\r",
							"    } catch (e) {\r",
							"        throw new Error('Response is not valid JSON, cannot perform schema validation.');\r",
							"    }\r",
							"\r",
							"    if (responseSchemaFile) {\r",
							"        try {\r",
							"            // Read the schema content from the global variable.\r",
							"            // NOTE: This assumes you have loaded the schema file content into a Newman global variable\r",
							"            // named 'responseSchemaContent' and passed it to Newman.\r",
							"            const schemaContent = pm.globals.get('response_schema_file');\r",
							"\r",
							"            const schema = JSON.parse(schemaContent);\r",
							"            const responseData = pm.response.json();\r",
							"            const validationResult = tv4.validateResult(responseData, schema);\r",
							"\r",
							"            pm.expect(validationResult.valid).to.be.true;\r",
							"            console.log('Response schema validation successful.');\r",
							"\r",
							"        } catch (e) {\r",
							"            console.error('Response schema validation failed:', e);\r",
							"            throw new Error(`Response schema validation failed: ${e.message}`);\r",
							"        }\r",
							"    } else {\r",
							"        console.log('No response schema file provided. Skipping validation.');\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"// --- Other Response Tests ---\r",
							"\r",
							"// This test checks for a valid HTTP status code (e.g., 200)\r",
							"pm.test(\"Should return 200 for valid input\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// This test checks for a specific HTTP status code (e.g., 400)\r",
							"pm.test(\"Should return 400 for invalid input\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"\r",
							"// Response Header Validation\r",
							"pm.test(\"Validate response headers\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json;charset=UTF-8\");\r",
							"    pm.expect(pm.response.headers.get(\"Cache-Control\")).to.include(\"no-cache\");\r",
							"});\r",
							"\r",
							"// Validate response body fields\r",
							"pm.test(\"Validate response body fields\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"userId\");\r",
							"    pm.expect(jsonData.userId).to.be.a(\"number\");\r",
							"    pm.expect(jsonData.name).to.eql(\"Vaishnavi\");\r",
							"    \r",
							"    // Regular expression for email validation\r",
							"    const emailRegex = /^([a-z0-9\\._]+)@((?:gmail|googlemail)\\.com)$/i;\r",
							"    pm.expect(jsonData.email).to.match(emailRegex);\r",
							"\r",
							"    pm.expect(jsonData.role).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"\r",
							"/* Query Parameter Validation*/\r",
							"// pm.test(\"Check if response matches query parameter\", function () {\r",
							"//     let jsonData = pm.response.json();\r",
							"//     pm.expect(jsonData.userId).to.eql(parseInt(pm.request.url.query.get(\"userId\")));\r",
							"// });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{requestBody}}\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": ""
				}
			},
			"response": []
		}
	]
}