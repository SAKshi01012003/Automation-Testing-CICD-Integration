{
	"info": {
		"_postman_id": "fd75b3cc-a13c-4a1f-97af-2831ccaf0d2e",
		"name": "Automation Testing Tool CICD Integration testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27495142"
	},
	"item": [
		{
			"name": "New Request",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// --- Handle Dynamic Payload ---\r",
							"\r",
							"// Get the entire JSON object for the current iteration from the data file\r",
							"const body = pm.iterationData.toObject();\r",
							"\r",
							"// Log the body to the console for debugging\r",
							"console.log('Using payload:', JSON.stringify(body, null, 2));\r",
							"\r",
							"// Set the entire JSON as a collection variable so it can be used in the request body\r",
							"pm.collectionVariables.set(\"requestBody\", JSON.stringify(body));\r",
							"\r",
							"\r",
							"// --- Handle Dynamic URL and HTTP Method ---\r",
							"\r",
							"// Get URL and method from Newman global variables\r",
							"const apiUrl = pm.globals.get('api_url');\r",
							"const httpMethod = pm.globals.get('http_method');\r",
							"\r",
							"// Set the request URL and method dynamically\r",
							"pm.request.url = apiUrl;\r",
							"pm.request.method = httpMethod;\r",
							"\r",
							"\r",
							"// --- Handle Dynamic Authentication ---\r",
							"\r",
							"// Clear any existing authorization headers to prevent conflicts\r",
							"pm.request.headers.remove('Authorization');\r",
							"\r",
							"// Get the authentication config JSON string from the Newman global variable\r",
							"const authConfigString = pm.globals.get('auth_config_json');\r",
							"\r",
							"if (authConfigString) {\r",
							"    try {\r",
							"        const authConfig = JSON.parse(authConfigString);\r",
							"\r",
							"        if (authConfig.type === 'Bearer') {\r",
							"            pm.request.headers.add({\r",
							"                key: 'Authorization',\r",
							"                value: `Bearer ${authConfig.token}`\r",
							"            });\r",
							"            console.log('Authentication type: Bearer');\r",
							"\r",
							"        } else if (authConfig.type === 'Basic') {\r",
							"            const credentials = btoa(`${authConfig.username}:${authConfig.password}`);\r",
							"            pm.request.headers.add({\r",
							"                key: 'Authorization',\r",
							"                value: `Basic ${credentials}`\r",
							"            });\r",
							"            console.log('Authentication type: Basic');\r",
							"            \r",
							"        } else if (authConfig.type === 'ApiKey' && authConfig.key_name && authConfig.key_value) {\r",
							"            pm.request.headers.add({\r",
							"                key: authConfig.key_name,\r",
							"                value: authConfig.key_value\r",
							"            });\r",
							"            console.log('Authentication type: API Key');\r",
							"\r",
							"        } else {\r",
							"            console.log('No supported authentication type provided in JSON.');\r",
							"        }\r",
							"\r",
							"    } catch (e) {\r",
							"        console.error('Failed to parse auth_config_json:', e);\r",
							"    }\r",
							"} else {\r",
							"    console.log('No authentication configuration provided.');\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validate response body fields\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"userId\");\r",
							"    pm.expect(jsonData.userId).to.be.a(\"number\");\r",
							"\r",
							"    pm.expect(jsonData.name).to.eql(\"Vaishnavi\");\r",
							"\r",
							"    const emailRegex = /^([a-z0-9\\._]+)@((?:gmail|googlemail)\\.com)$/i; \r",
							"    pm.expect(jsonData.email).to.match(emailRegex);\r",
							"\r",
							"    pm.expect(jsonData.role).to.be.a(\"string\");\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"//Response Header Validation\r",
							"pm.test(\"Validate response headers\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json;charset=UTF-8\");\r",
							"    pm.expect(pm.response.headers.get(\"Cache-Control\")).to.include(\"no-cache\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Should return 200 for valid input\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Should return 400 for invalid input\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"\r",
							"/* Query Parameter Validation*/\r",
							"// pm.test(\"Check if response matches query parameter\", function () {\r",
							"//     let jsonData = pm.response.json();\r",
							"//     pm.expect(jsonData.userId).to.eql(parseInt(pm.request.url.query.get(\"userId\")));\r",
							"// });\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{{requestBody}}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": ""
				}
			},
			"response": []
		}
	]
}